/**
 * Core module for working with InDesign.
 */

(function () {
    var indd = {},
        _ = require('estk!lodash');

    /**
     * Gets the current active document.
     */
    indd.getActiveDocument = function () {
        if (app.documents.count()) {
            return app.activeDocument;
        } else {
            alert('An active document is required. Please open/create an InDesign document.',
                  'Error: active document required.', true);
            exit();
        }
    };

    indd.search = function (searchString, replacementString, config) {
        var defaultOptions,
            hasChanges = false,
            findChangeOptionsType = 'findChangeTextOptions',
            findPreferencesType   = 'findTextPreferences',
            changePreferencesType = 'changeTextPreferences',
            findFn   = 'findText',
            changeFn = 'changeText';

        defaultOptions = {
            searchType: 'text',
            doc: indd.getActiveDocument(),
            findChangeOptions: {
                caseSensitive: false,
                includeFootnotes: false,
                includeHiddenLayers: false,
                includeLockedLayersForFind: false,
                includeLockedStoriesForFind: false,
                includeMasterPages: false,
                wholeWord: false
            },
            findPreferences: {},
            changePreferences: {}
        };

        // replacementString and searchString are optional so treat
        // them as config if they are or type object
        if (searchString && typeof searchString === 'object' ) {
            config = searchString;
            searchString = undefined;
        }
        if (replacementString && typeof replacementString === 'object' ) {
            config = replacementString;
            replacementString = undefined;
        }

        config = _.extend(defaultOptions, config);

        if (config.searchType === 'grep') {
            findChangeOptionsType = 'findChangeGrepOptions';
            findPreferencesType   = 'findGrepPreferences';
            changePreferencesType = 'changeGrepPreferences';
            findFn   = 'findGrep';
            changeFn = 'changeGrep';
        }

        // reset preferences
        app[findPreferencesType]   = NothingEnum.nothing;
        app[changePreferencesType] = NothingEnum.nothing;

        if (typeof(searchString) !== 'undefined') {
            app[findPreferencesType].findWhat = searchString;
        }

        if (typeof(replacementString) !== 'undefined') {
            app[changePreferencesType].changeTo = replacementString;
            hasChanges = true;
        }

        _.each(config.findPreferences, function (val, prop) {
            if (app[findPreferencesType].hasOwnProperty(prop)) {
                app[findPreferencesType][prop] = val;
            }
        });

        _.each(config.changePreferences, function (val, prop) {
            if (app[changePreferencesType].hasOwnProperty(prop)) {
                app[changePreferencesType][prop] = val;
                hasChanges = true;
            }
        });

        _.each(config.findChangeOptions, function (val, prop) {
            if (app[findChangeOptionsType].hasOwnProperty(prop)) {
                app[findChangeOptionsType][prop] = val;
            }
        });

        hasChanges && config.doc[changeFn]();

        return config.doc[findFn]();
    };

    exports = indd;
}).call($.global);
